import React, { useState, useEffect } from 'react';
import { RecaptchaVerifier, signInWithPhoneNumber, signOut } from "firebase/auth";

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Auth ---
export const Auth = ({ user, subscription, onGetSubscriptionClick, auth }) => {
    const [phoneNumber, setPhoneNumber] = useState('');
    const [verificationCode, setVerificationCode] = useState('');
    const [confirmationResult, setConfirmationResult] = useState(null);
    const [error, setError] = useState('');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è reCAPTCHA
    useEffect(() => {
        if (!window.recaptchaVerifier) {
            window.recaptchaVerifier = new RecaptchaVerifier(auth, 'recaptcha-container', {
                'size': 'invisible',
                'callback': (response) => {
                    // reCAPTCHA solved, allow signInWithPhoneNumber.
                    console.log("reCAPTCHA solved");
                }
            });
        }
    }, [auth]);
    
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const handleSendCode = async () => {
        setError('');
        if (!phoneNumber || !/^\+[1-9]\d{1,14}$/.test(phoneNumber)) {
            setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789");
            return;
        }
        try {
            const appVerifier = window.recaptchaVerifier;
            const result = await signInWithPhoneNumber(auth, phoneNumber, appVerifier);
            setConfirmationResult(result);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:", error);
            setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–±—Ä–æ—Å–∏—Ç—å reCAPTCHA
            window.recaptchaVerifier.render().then(widgetId => {
                window.grecaptcha.reset(widgetId);
            });
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –∏–∑ –°–ú–°
    const handleVerifyCode = async () => {
        setError('');
        if (!verificationCode || verificationCode.length !== 6) {
            setError("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä.");
            return;
        }
        try {
            await confirmationResult.confirm(verificationCode);
            setConfirmationResult(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞:", error);
            setError("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
    const handleSignOut = () => {
        signOut(auth).catch(error => console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error));
    };
    
    const hasActiveSubscription = subscription && new Date(subscription.expires_at) > new Date();

    return (
        <div className="p-4 space-y-4">
            {user && !user.isAnonymous ? (
                // --- –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ó–ê–õ–û–ì–ò–ù–ï–ù–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
                <div className="p-4 rounded-lg bg-component-bg border border-border-color">
                    <div className="flex items-center space-x-4 mb-4">
                        <img src={user.photoURL || 'https://placehold.co/64x64/F5F1ED/2C3A47?text=üë§'} alt="Avatar" className="w-16 h-16 rounded-full" />
                        <div>
                            <h3 className="font-bold">{user.phoneNumber}</h3>
                            <p className="text-sm opacity-70">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</p>
                        </div>
                    </div>
                    <button onClick={handleSignOut} className="w-full py-2 rounded-lg bg-gray-200 text-gray-800 font-bold">–í—ã–π—Ç–∏</button>
                </div>
            ) : (
                // --- –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ê–ù–û–ù–ò–ú–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
                <div className="p-4 rounded-lg bg-component-bg border border-border-color">
                    <h3 className="font-bold mb-2">–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç</h3>
                    <p className="text-sm opacity-70 mb-3">
                        –ß—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–∫–ª–∞–¥–∫–∏, –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏.
                    </p>
                    
                    {!confirmationResult ? (
                        // --- –≠–¢–ê–ü 1: –í–í–û–î –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê ---
                        <div className="space-y-3">
                            <input
                                type="tel"
                                value={phoneNumber}
                                onChange={(e) => setPhoneNumber(e.target.value)}
                                placeholder="+79123456789"
                                className="w-full bg-background border border-border-color rounded-lg py-2 px-4 text-text-main placeholder-text-main/50 focus:outline-none focus:ring-2 focus:ring-accent"
                            />
                            <button onClick={handleSendCode} className="w-full py-2 rounded-lg bg-accent text-white font-bold">
                                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥
                            </button>
                        </div>
                    ) : (
                        // --- –≠–¢–ê–ü 2: –í–í–û–î –ö–û–î–ê –ò–ó –°–ú–° ---
                        <div className="space-y-3">
                            <input
                                type="number"
                                value={verificationCode}
                                onChange={(e) => setVerificationCode(e.target.value)}
                                placeholder="–ö–æ–¥ –∏–∑ –°–ú–°"
                                className="w-full bg-background border border-border-color rounded-lg py-2 px-4 text-text-main placeholder-text-main/50 focus:outline-none focus:ring-2 focus:ring-accent"
                            />
                            <button onClick={handleVerifyCode} className="w-full py-2 rounded-lg bg-accent text-white font-bold">
                                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                            </button>
                        </div>
                    )}
                    {error && <p className="text-red-500 text-xs mt-2 text-center">{error}</p>}
                </div>
            )}

            {/* --- –ë–õ–û–ö –ü–û–î–ü–ò–°–ö–ò (–û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) --- */}
            <div className="p-4 rounded-lg bg-component-bg border border-border-color">
                <h3 className="font-bold mb-2">–ü–æ–¥–ø–∏—Å–∫–∞</h3>
                 {hasActiveSubscription ? (
                    <div>
                        <p className="text-green-500">–ê–∫—Ç–∏–≤–Ω–∞</p>
                        <p className="text-sm opacity-70">
                            –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {new Date(subscription.expires_at).toLocaleDateString()}
                        </p>
                    </div>
                ) : (
                    <div>
                        <p className="text-red-500">–ù–µ–∞–∫—Ç–∏–≤–Ω–∞</p>
                         <p className="text-sm opacity-70 mb-3">
                            –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø–ª–∞—Ç–Ω—ã–º –≥–ª–∞–≤–∞–º.
                        </p>
                        <button onClick={onGetSubscriptionClick} className="w-full py-2 rounded-lg bg-accent text-white font-bold shadow-lg shadow-accent/30 transition-all hover:scale-105">
                            –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
};